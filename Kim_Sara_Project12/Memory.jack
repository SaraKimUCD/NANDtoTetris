// Grace Kang & Sara Kim

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
        static int heapBase;
        static int heapLength;

    /** Initializes the class. */
    // function 12.6
    function void init() {
        let heapBase = 2048;
        let heapLength = 16383;

        // freeList = heapBase;
        let memory = 0;
        let freeList = heapBase;
        // freeList.length = heapLength
        let freeList[0] = heapLength - heapBase;
        // freeList.next = null
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    // unfinished
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
     // function 12.6
    function int alloc(int size) {

    }

    // unfinished
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
     // function 12.6
    function void deAlloc(Array o) {
        var Array temp;
        let temp = freeList;
    }    
}
